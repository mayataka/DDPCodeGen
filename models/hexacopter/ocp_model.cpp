 
#include "ocp_model.hpp"


namespace cddp {

void OCPModel::stateEquation(const double t, const double dtau, const double* x, 
                             const double* u, double* dx) const {
  double x0 = sin(x[3]);
  double x1 = sin(x[5]);
  double x2 = cos(x[5]);
  double x3 = cos(x[3]);
  double x4 = x3*sin(x[4]);
  double x5 = u[1] + u[3] + u[5];
  double x6 = (u[0] + u[2] + u[4] + x5)/m;
  double x7 = dtau*x6;
  double x8 = 1.0/Ixx;
  double x9 = (1.0/2.0)*u[0];
  double x10 = (1.0/2.0)*u[2];
  double x11 = (1.0/2.0)*u[3];
  double x12 = (1.0/2.0)*u[5];
  double x13 = 1.0/Iyy;
  double x14 = sqrt(3);
  double x15 = 1.0/Izz;
  dx[0] = dtau*x[6] + x[0];
  dx[1] = dtau*x[7] + x[1];
  dx[2] = dtau*x[8] + x[2];
  dx[3] = dtau*x[9] + x[3];
  dx[4] = dtau*x[10] + x[4];
  dx[5] = dtau*x[11] + x[5];
  dx[6] = x7*(x0*x1 + x2*x4) + x[6];
  dx[7] = x7*(-x0*x2 + x1*x4) + x[7];
  dx[8] = dtau*(-g + x3*x6*cos(x[4])) + x[8];
  dx[9] = dtau*(l*x8*(-u[1] + u[4] - x10 + x11 + x12 - x9) + x8*x[10]*x[11]*(Iyy - Izz)) + x[9];
  dx[10] = dtau*(l*x13*(x10*x14 + x11*x14 - x12*x14 - x14*x9) + x13*x[11]*x[9]*(-Ixx + Izz)) + x[10];
  dx[11] = dtau*(x15*x[10]*x[9]*(Ixx - Iyy) + x15*(-gamma*x[11] + k*(-u[0] - u[2] - u[4] + x5))) + x[11];
 
}

void OCPModel::stageCostDerivatives(const double t, const double dtau, 
                                    const double* x, const double* u, 
                                    double* lx, double* lu, double* lxx, 
                                    double* lux, double* luu) const {
  double x0 = 2*t;
  double x1 = sin(x0);
  double x2 = dtau*q[0];
  double x3 = cos(x0);
  double x4 = dtau*q[1];
  double x5 = dtau*q[2];
  double x6 = dtau*q[3];
  double x7 = dtau*q[4];
  double x8 = dtau*q[5];
  double x9 = dtau*q[6];
  double x10 = dtau*q[7];
  double x11 = dtau*q[8];
  double x12 = dtau*q[9];
  double x13 = dtau*q[10];
  double x14 = dtau*q[11];
  double x15 = -1.0/3.0*g*m;
  double x16 = -u[0] + u_max;
  double x17 = -u_min;
  double x18 = u[0] + x17;
  double x19 = -u[1] + u_max;
  double x20 = u[1] + x17;
  double x21 = -u[2] + u_max;
  double x22 = u[2] + x17;
  double x23 = -u[3] + u_max;
  double x24 = u[3] + x17;
  double x25 = -u[4] + u_max;
  double x26 = u[4] + x17;
  double x27 = -u[5] + u_max;
  double x28 = u[5] + x17;
  lx[0] += (1.0/2.0)*x2*(-2*x1 + 2*x[0]);
  lx[1] += (1.0/2.0)*x4*(2*x3 + 2*x[1] - 2);
  lx[2] += (1.0/2.0)*x5*(2*x[2] - 2*z_ref - 4*sin(t));
  lx[3] += x6*x[3];
  lx[4] += x7*x[4];
  lx[5] += x8*x[5];
  lx[6] += (1.0/2.0)*x9*(-4*x3 + 2*x[6]);
  lx[7] += (1.0/2.0)*x10*(-4*x1 + 2*x[7]);
  lx[8] += (1.0/2.0)*x11*(2*x[8] - 4*cos(t));
  lx[9] += x12*x[9];
  lx[10] += x13*x[10];
  lx[11] += x14*x[11];
  lu[0] += dtau*(epsilon*(-1/x18 + 1.0/x16) + (1.0/2.0)*r[0]*(2*u[0] + x15));
  lu[1] += dtau*(epsilon*(-1/x20 + 1.0/x19) + (1.0/2.0)*r[1]*(2*u[1] + x15));
  lu[2] += dtau*(epsilon*(-1/x22 + 1.0/x21) + (1.0/2.0)*r[2]*(2*u[2] + x15));
  lu[3] += dtau*(epsilon*(-1/x24 + 1.0/x23) + (1.0/2.0)*r[3]*(2*u[3] + x15));
  lu[4] += dtau*(epsilon*(-1/x26 + 1.0/x25) + (1.0/2.0)*r[4]*(2*u[4] + x15));
  lu[5] += dtau*(epsilon*(-1/x28 + 1.0/x27) + (1.0/2.0)*r[5]*(2*u[5] + x15));
  lxx[0] += x2;
  lxx[13] += x4;
  lxx[26] += x5;
  lxx[39] += x6;
  lxx[52] += x7;
  lxx[65] += x8;
  lxx[78] += x9;
  lxx[91] += x10;
  lxx[104] += x11;
  lxx[117] += x12;
  lxx[130] += x13;
  lxx[143] += x14;
  luu[0] += dtau*(epsilon*(pow(x18, -2) + pow(x16, -2)) + r[0]);
  luu[7] += dtau*(epsilon*(pow(x20, -2) + pow(x19, -2)) + r[1]);
  luu[14] += dtau*(epsilon*(pow(x22, -2) + pow(x21, -2)) + r[2]);
  luu[21] += dtau*(epsilon*(pow(x24, -2) + pow(x23, -2)) + r[3]);
  luu[28] += dtau*(epsilon*(pow(x26, -2) + pow(x25, -2)) + r[4]);
  luu[35] += dtau*(epsilon*(pow(x28, -2) + pow(x27, -2)) + r[5]);
 
}


void OCPModel::terminalCostDerivatives(const double t, const double* x, 
                                       double* phix, double* phixx) const {
  double x0 = 2*t;
  double x1 = sin(x0);
  double x2 = cos(x0);
  phix[0] += (1.0/2.0)*q_terminal[0]*(-2*x1 + 2*x[0]);
  phix[1] += (1.0/2.0)*q_terminal[1]*(2*x2 + 2*x[1] - 2);
  phix[2] += (1.0/2.0)*q_terminal[2]*(2*x[2] - 2*z_ref - 4*sin(t));
  phix[3] += q_terminal[3]*x[3];
  phix[4] += q_terminal[4]*x[4];
  phix[5] += q_terminal[5]*x[5];
  phix[6] += (1.0/2.0)*q_terminal[6]*(-4*x2 + 2*x[6]);
  phix[7] += (1.0/2.0)*q_terminal[7]*(-4*x1 + 2*x[7]);
  phix[8] += (1.0/2.0)*q_terminal[8]*(2*x[8] - 4*cos(t));
  phix[9] += q_terminal[9]*x[9];
  phix[10] += q_terminal[10]*x[10];
  phix[11] += q_terminal[11]*x[11];
  phixx[0] += q_terminal[0];
  phixx[13] += q_terminal[1];
  phixx[26] += q_terminal[2];
  phixx[39] += q_terminal[3];
  phixx[52] += q_terminal[4];
  phixx[65] += q_terminal[5];
  phixx[78] += q_terminal[6];
  phixx[91] += q_terminal[7];
  phixx[104] += q_terminal[8];
  phixx[117] += q_terminal[9];
  phixx[130] += q_terminal[10];
  phixx[143] += q_terminal[11];
 
}

void OCPModel::dynamicsDerivatives(const double t, const double dtau, 
                                   const double* x, const double* u, 
                                   const double* Vx, const double* Vxx, 
                                   double* fxVx, double* fuVx, double* fxVxxfx, 
                                   double* fuVxxfx, double* fuVxxfu, 
                                   double* Vxfxx, double* Vxfux, 
                                   double* Vxfuu) const {
  double x0 = u[0] + u[1] + u[2] + u[3] + u[4] + u[5];
  double x1 = 1.0/m;
  double x2 = dtau*x1;
  double x3 = Vx[8]*x2;
  double x4 = sin(x[3]);
  double x5 = cos(x[4]);
  double x6 = x4*x5;
  double x7 = x3*x6;
  double x8 = sin(x[5]);
  double x9 = cos(x[3]);
  double x10 = x8*x9;
  double x11 = sin(x[4]);
  double x12 = cos(x[5]);
  double x13 = x12*x4;
  double x14 = x10 - x11*x13;
  double x15 = Vx[6]*x2;
  double x16 = x14*x15;
  double x17 = x12*x9;
  double x18 = x4*x8;
  double x19 = x11*x18;
  double x20 = -x17 - x19;
  double x21 = x2*x20;
  double x22 = Vx[7]*x21;
  double x23 = x11*x9;
  double x24 = x23*x3;
  double x25 = x0*x15;
  double x26 = x17*x5;
  double x27 = x0*x2;
  double x28 = x10*x5;
  double x29 = Vx[7]*x28;
  double x30 = x11*x17;
  double x31 = x18 + x30;
  double x32 = x2*x31;
  double x33 = Vx[7]*x32;
  double x34 = x10*x11;
  double x35 = x13 - x34;
  double x36 = x15*x35;
  double x37 = 1.0/Iyy;
  double x38 = x37*(-Ixx + Izz);
  double x39 = dtau*x38;
  double x40 = Vx[10]*x39;
  double x41 = Ixx - Iyy;
  double x42 = 1.0/Izz;
  double x43 = dtau*x42;
  double x44 = x41*x43;
  double x45 = Vx[11]*x44;
  double x46 = 1.0/Ixx;
  double x47 = x46*(Iyy - Izz);
  double x48 = dtau*x47;
  double x49 = Vx[9]*x48;
  double x50 = -gamma*x43 + 1;
  double x51 = (1.0/2.0)*sqrt(3)*l*x37;
  double x52 = dtau*x51;
  double x53 = Vx[10]*x52;
  double x54 = -x53;
  double x55 = l*x46;
  double x56 = dtau*x55;
  double x57 = Vx[9]*x56;
  double x58 = (1.0/2.0)*x57;
  double x59 = k*x43;
  double x60 = Vx[11]*x59;
  double x61 = -x13 + x34;
  double x62 = x2*x61;
  double x63 = x5*x9;
  double x64 = x3*x63;
  double x65 = Vx[6]*x32 + Vx[7]*x62 + x64;
  double x66 = -x60 + x65;
  double x67 = -x58 + x66;
  double x68 = x60 + x65;
  double x69 = x58 + x68;
  double x70 = Vxx[8]*dtau;
  double x71 = x0*x1;
  double x72 = x70*x71;
  double x73 = Vxx[6]*dtau;
  double x74 = x71*x73;
  double x75 = Vxx[7]*dtau;
  double x76 = x20*x71;
  double x77 = x28*x71;
  double x78 = x1*x31;
  double x79 = x0*x78;
  double x80 = Vxx[0]*dtau;
  double x81 = Vxx[1]*dtau;
  double x82 = Vxx[2]*dtau;
  double x83 = Vxx[3]*dtau;
  double x84 = Vxx[10]*dtau;
  double x85 = x38*x84;
  double x86 = Vxx[11]*dtau;
  double x87 = x41*x42;
  double x88 = x86*x87;
  double x89 = Vxx[4]*dtau;
  double x90 = Vxx[9]*dtau;
  double x91 = x47*x90;
  double x92 = Vxx[5]*dtau;
  double x93 = Vxx[20]*dtau;
  double x94 = x71*x93;
  double x95 = Vxx[18]*dtau;
  double x96 = x71*x95;
  double x97 = Vxx[19]*dtau;
  double x98 = Vxx[12]*dtau;
  double x99 = Vxx[13]*dtau;
  double x100 = Vxx[14]*dtau;
  double x101 = Vxx[15]*dtau;
  double x102 = Vxx[22]*dtau;
  double x103 = x102*x38;
  double x104 = Vxx[23]*dtau;
  double x105 = x104*x87;
  double x106 = Vxx[16]*dtau;
  double x107 = Vxx[21]*dtau;
  double x108 = x107*x47;
  double x109 = Vxx[17]*dtau;
  double x110 = Vxx[32]*dtau;
  double x111 = x110*x71;
  double x112 = Vxx[30]*dtau;
  double x113 = x112*x71;
  double x114 = Vxx[31]*dtau;
  double x115 = Vxx[24]*dtau;
  double x116 = Vxx[25]*dtau;
  double x117 = Vxx[26]*dtau;
  double x118 = Vxx[27]*dtau;
  double x119 = Vxx[34]*dtau;
  double x120 = x119*x38;
  double x121 = Vxx[35]*dtau;
  double x122 = x121*x87;
  double x123 = Vxx[28]*dtau;
  double x124 = Vxx[33]*dtau;
  double x125 = x124*x47;
  double x126 = Vxx[29]*dtau;
  double x127 = x27*x6;
  double x128 = x14*x27;
  double x129 = x0*x21;
  double x130 = Vxx[36] + Vxx[72]*x128 + Vxx[84]*x129 - Vxx[96]*x127;
  double x131 = Vxx[37] + Vxx[73]*x128 + Vxx[85]*x129 - Vxx[97]*x127;
  double x132 = Vxx[38] + Vxx[74]*x128 + Vxx[86]*x129 - Vxx[98]*x127;
  double x133 = -Vxx[102]*x127 + Vxx[42] + Vxx[78]*x128 + Vxx[90]*x129;
  double x134 = -Vxx[103]*x127 + Vxx[43] + Vxx[79]*x128 + Vxx[91]*x129;
  double x135 = -Vxx[104]*x127 + Vxx[44] + Vxx[80]*x128 + Vxx[92]*x129;
  double x136 = Vxx[39] + Vxx[75]*x128 + Vxx[87]*x129 - Vxx[99]*x127;
  double x137 = x23*x27;
  double x138 = x26*x27;
  double x139 = x27*x28;
  double x140 = -Vxx[100]*x127 + Vxx[40] + Vxx[76]*x128 + Vxx[88]*x129;
  double x141 = x27*x35;
  double x142 = x0*x32;
  double x143 = -Vxx[101]*x127 + Vxx[41] + Vxx[77]*x128 + Vxx[89]*x129;
  double x144 = -Vxx[107]*x127 + Vxx[47] + Vxx[83]*x128 + Vxx[95]*x129;
  double x145 = x144*x44;
  double x146 = -Vxx[106]*x127 + Vxx[46] + Vxx[82]*x128 + Vxx[94]*x129;
  double x147 = x146*x39;
  double x148 = -Vxx[105]*x127 + Vxx[45] + Vxx[81]*x128 + Vxx[93]*x129;
  double x149 = x148*x48;
  double x150 = Vxx[48] + Vxx[72]*x138 + Vxx[84]*x139 - Vxx[96]*x137;
  double x151 = Vxx[49] + Vxx[73]*x138 + Vxx[85]*x139 - Vxx[97]*x137;
  double x152 = Vxx[50] + Vxx[74]*x138 + Vxx[86]*x139 - Vxx[98]*x137;
  double x153 = -Vxx[102]*x137 + Vxx[54] + Vxx[78]*x138 + Vxx[90]*x139;
  double x154 = -Vxx[103]*x137 + Vxx[55] + Vxx[79]*x138 + Vxx[91]*x139;
  double x155 = -Vxx[104]*x137 + Vxx[56] + Vxx[80]*x138 + Vxx[92]*x139;
  double x156 = Vxx[51] + Vxx[75]*x138 + Vxx[87]*x139 - Vxx[99]*x137;
  double x157 = -Vxx[100]*x137 + Vxx[52] + Vxx[76]*x138 + Vxx[88]*x139;
  double x158 = -Vxx[101]*x137 + Vxx[53] + Vxx[77]*x138 + Vxx[89]*x139;
  double x159 = -Vxx[107]*x137 + Vxx[59] + Vxx[83]*x138 + Vxx[95]*x139;
  double x160 = x159*x44;
  double x161 = -Vxx[106]*x137 + Vxx[58] + Vxx[82]*x138 + Vxx[94]*x139;
  double x162 = x161*x39;
  double x163 = -Vxx[105]*x137 + Vxx[57] + Vxx[81]*x138 + Vxx[93]*x139;
  double x164 = x163*x48;
  double x165 = Vxx[60] + Vxx[72]*x141 + Vxx[84]*x142;
  double x166 = Vxx[61] + Vxx[73]*x141 + Vxx[85]*x142;
  double x167 = Vxx[62] + Vxx[74]*x141 + Vxx[86]*x142;
  double x168 = Vxx[66] + Vxx[78]*x141 + Vxx[90]*x142;
  double x169 = Vxx[67] + Vxx[79]*x141 + Vxx[91]*x142;
  double x170 = Vxx[68] + Vxx[80]*x141 + Vxx[92]*x142;
  double x171 = Vxx[63] + Vxx[75]*x141 + Vxx[87]*x142;
  double x172 = Vxx[64] + Vxx[76]*x141 + Vxx[88]*x142;
  double x173 = Vxx[65] + Vxx[77]*x141 + Vxx[89]*x142;
  double x174 = Vxx[71] + Vxx[83]*x141 + Vxx[95]*x142;
  double x175 = x174*x44;
  double x176 = Vxx[70] + Vxx[82]*x141 + Vxx[94]*x142;
  double x177 = x176*x39;
  double x178 = Vxx[69] + Vxx[81]*x141 + Vxx[93]*x142;
  double x179 = x178*x48;
  double x180 = Vxx[72] + x80;
  double x181 = Vxx[73] + x81;
  double x182 = Vxx[74] + x82;
  double x183 = Vxx[78] + x73;
  double x184 = Vxx[79] + x75;
  double x185 = Vxx[80] + x70;
  double x186 = Vxx[75] + x83;
  double x187 = Vxx[76] + x89;
  double x188 = Vxx[77] + x92;
  double x189 = Vxx[83] + x86;
  double x190 = x189*x44;
  double x191 = Vxx[82] + x84;
  double x192 = x191*x39;
  double x193 = Vxx[81] + x90;
  double x194 = x193*x48;
  double x195 = Vxx[84] + x98;
  double x196 = Vxx[85] + x99;
  double x197 = Vxx[86] + x100;
  double x198 = Vxx[90] + x95;
  double x199 = Vxx[91] + x97;
  double x200 = Vxx[92] + x93;
  double x201 = Vxx[87] + x101;
  double x202 = Vxx[88] + x106;
  double x203 = Vxx[89] + x109;
  double x204 = Vxx[95] + x104;
  double x205 = x204*x44;
  double x206 = Vxx[94] + x102;
  double x207 = x206*x39;
  double x208 = Vxx[93] + x107;
  double x209 = x208*x48;
  double x210 = Vxx[96] + x115;
  double x211 = Vxx[97] + x116;
  double x212 = Vxx[98] + x117;
  double x213 = Vxx[102] + x112;
  double x214 = Vxx[103] + x114;
  double x215 = Vxx[104] + x110;
  double x216 = Vxx[99] + x118;
  double x217 = Vxx[100] + x123;
  double x218 = Vxx[101] + x126;
  double x219 = Vxx[107] + x121;
  double x220 = x219*x44;
  double x221 = Vxx[106] + x119;
  double x222 = x221*x39;
  double x223 = Vxx[105] + x124;
  double x224 = x223*x48;
  double x225 = x39*x[11];
  double x226 = x44*x[10];
  double x227 = Vxx[108] + Vxx[120]*x225 + Vxx[132]*x226 + Vxx[36]*dtau;
  double x228 = Vxx[109] + Vxx[121]*x225 + Vxx[133]*x226 + Vxx[37]*dtau;
  double x229 = Vxx[110] + Vxx[122]*x225 + Vxx[134]*x226 + Vxx[38]*dtau;
  double x230 = Vxx[114] + Vxx[126]*x225 + Vxx[138]*x226 + Vxx[42]*dtau;
  double x231 = Vxx[115] + Vxx[127]*x225 + Vxx[139]*x226 + Vxx[43]*dtau;
  double x232 = Vxx[116] + Vxx[128]*x225 + Vxx[140]*x226 + Vxx[44]*dtau;
  double x233 = Vxx[111] + Vxx[123]*x225 + Vxx[135]*x226 + Vxx[39]*dtau;
  double x234 = Vxx[112] + Vxx[124]*x225 + Vxx[136]*x226 + Vxx[40]*dtau;
  double x235 = Vxx[113] + Vxx[125]*x225 + Vxx[137]*x226 + Vxx[41]*dtau;
  double x236 = Vxx[119] + Vxx[131]*x225 + Vxx[143]*x226 + Vxx[47]*dtau;
  double x237 = Vxx[118] + Vxx[130]*x225 + Vxx[142]*x226 + Vxx[46]*dtau;
  double x238 = Vxx[117] + Vxx[129]*x225 + Vxx[141]*x226 + Vxx[45]*dtau;
  double x239 = x238*x48;
  double x240 = x44*x[9];
  double x241 = x39*x[9];
  double x242 = x48*x[11];
  double x243 = Vxx[108]*x242 + Vxx[120] + Vxx[132]*x240 + Vxx[48]*dtau;
  double x244 = Vxx[109]*x242 + Vxx[121] + Vxx[133]*x240 + Vxx[49]*dtau;
  double x245 = Vxx[110]*x242 + Vxx[122] + Vxx[134]*x240 + Vxx[50]*dtau;
  double x246 = Vxx[114]*x242 + Vxx[126] + Vxx[138]*x240 + Vxx[54]*dtau;
  double x247 = Vxx[115]*x242 + Vxx[127] + Vxx[139]*x240 + Vxx[55]*dtau;
  double x248 = Vxx[116]*x242 + Vxx[128] + Vxx[140]*x240 + Vxx[56]*dtau;
  double x249 = Vxx[111]*x242 + Vxx[123] + Vxx[135]*x240 + Vxx[51]*dtau;
  double x250 = Vxx[112]*x242 + Vxx[124] + Vxx[136]*x240 + Vxx[52]*dtau;
  double x251 = Vxx[113]*x242 + Vxx[125] + Vxx[137]*x240 + Vxx[53]*dtau;
  double x252 = Vxx[119]*x242 + Vxx[131] + Vxx[143]*x240 + Vxx[59]*dtau;
  double x253 = Vxx[118]*x242 + Vxx[130] + Vxx[142]*x240 + Vxx[58]*dtau;
  double x254 = Vxx[117]*x242 + Vxx[129] + Vxx[141]*x240 + Vxx[57]*dtau;
  double x255 = x48*x[10];
  double x256 = Vxx[108]*x255 + Vxx[120]*x241 + Vxx[132]*x50 + Vxx[60]*dtau;
  double x257 = Vxx[109]*x255 + Vxx[121]*x241 + Vxx[133]*x50 + Vxx[61]*dtau;
  double x258 = Vxx[110]*x255 + Vxx[122]*x241 + Vxx[134]*x50 + Vxx[62]*dtau;
  double x259 = Vxx[114]*x255 + Vxx[126]*x241 + Vxx[138]*x50 + Vxx[66]*dtau;
  double x260 = Vxx[115]*x255 + Vxx[127]*x241 + Vxx[139]*x50 + Vxx[67]*dtau;
  double x261 = Vxx[116]*x255 + Vxx[128]*x241 + Vxx[140]*x50 + Vxx[68]*dtau;
  double x262 = Vxx[111]*x255 + Vxx[123]*x241 + Vxx[135]*x50 + Vxx[63]*dtau;
  double x263 = Vxx[112]*x255 + Vxx[124]*x241 + Vxx[136]*x50 + Vxx[64]*dtau;
  double x264 = Vxx[113]*x255 + Vxx[125]*x241 + Vxx[137]*x50 + Vxx[65]*dtau;
  double x265 = Vxx[119]*x255 + Vxx[131]*x241 + Vxx[143]*x50 + Vxx[71]*dtau;
  double x266 = Vxx[118]*x255 + Vxx[130]*x241 + Vxx[142]*x50 + Vxx[70]*dtau;
  double x267 = Vxx[117]*x255 + Vxx[129]*x241 + Vxx[141]*x50 + Vxx[69]*dtau;
  double x268 = x51*x84;
  double x269 = -x268;
  double x270 = x55*x90;
  double x271 = (1.0/2.0)*x270;
  double x272 = k*x42;
  double x273 = x272*x86;
  double x274 = x1*x61;
  double x275 = x1*x63;
  double x276 = x274*x75 + x275*x70 + x73*x78;
  double x277 = -x273 + x276;
  double x278 = -x271 + x277;
  double x279 = x273 + x276;
  double x280 = x271 + x279;
  double x281 = x102*x51;
  double x282 = -x281;
  double x283 = x107*x55;
  double x284 = (1.0/2.0)*x283;
  double x285 = x104*x272;
  double x286 = x274*x97 + x275*x93 + x78*x95;
  double x287 = -x285 + x286;
  double x288 = -x284 + x287;
  double x289 = x285 + x286;
  double x290 = x284 + x289;
  double x291 = x119*x51;
  double x292 = -x291;
  double x293 = x124*x55;
  double x294 = (1.0/2.0)*x293;
  double x295 = x121*x272;
  double x296 = x110*x275 + x112*x78 + x114*x274;
  double x297 = -x295 + x296;
  double x298 = -x294 + x297;
  double x299 = x295 + x296;
  double x300 = x294 + x299;
  double x301 = x146*x52;
  double x302 = -x301;
  double x303 = x148*x56;
  double x304 = (1.0/2.0)*x303;
  double x305 = x144*x59;
  double x306 = x2*x63;
  double x307 = x133*x32 + x134*x62 + x135*x306;
  double x308 = -x305 + x307;
  double x309 = -x304 + x308;
  double x310 = x305 + x307;
  double x311 = x304 + x310;
  double x312 = x161*x52;
  double x313 = -x312;
  double x314 = x163*x56;
  double x315 = (1.0/2.0)*x314;
  double x316 = x159*x59;
  double x317 = x153*x32 + x154*x62 + x155*x306;
  double x318 = -x316 + x317;
  double x319 = -x315 + x318;
  double x320 = x316 + x317;
  double x321 = x315 + x320;
  double x322 = x176*x52;
  double x323 = -x322;
  double x324 = x178*x56;
  double x325 = (1.0/2.0)*x324;
  double x326 = x174*x59;
  double x327 = x168*x32 + x169*x62 + x170*x306;
  double x328 = -x326 + x327;
  double x329 = -x325 + x328;
  double x330 = x326 + x327;
  double x331 = x325 + x330;
  double x332 = x191*x52;
  double x333 = -x332;
  double x334 = x193*x56;
  double x335 = (1.0/2.0)*x334;
  double x336 = x189*x59;
  double x337 = x183*x32 + x184*x62 + x185*x306;
  double x338 = -x336 + x337;
  double x339 = -x335 + x338;
  double x340 = x336 + x337;
  double x341 = x335 + x340;
  double x342 = x206*x52;
  double x343 = -x342;
  double x344 = x208*x56;
  double x345 = (1.0/2.0)*x344;
  double x346 = x204*x59;
  double x347 = x198*x32 + x199*x62 + x200*x306;
  double x348 = -x346 + x347;
  double x349 = -x345 + x348;
  double x350 = x346 + x347;
  double x351 = x345 + x350;
  double x352 = x221*x52;
  double x353 = -x352;
  double x354 = x223*x56;
  double x355 = (1.0/2.0)*x354;
  double x356 = x219*x59;
  double x357 = x213*x32 + x214*x62 + x215*x306;
  double x358 = -x356 + x357;
  double x359 = -x355 + x358;
  double x360 = x356 + x357;
  double x361 = x355 + x360;
  double x362 = x237*x52;
  double x363 = -x362;
  double x364 = x238*x56;
  double x365 = (1.0/2.0)*x364;
  double x366 = x236*x59;
  double x367 = x230*x32 + x231*x62 + x232*x306;
  double x368 = -x366 + x367;
  double x369 = -x365 + x368;
  double x370 = x366 + x367;
  double x371 = x365 + x370;
  double x372 = x253*x52;
  double x373 = -x372;
  double x374 = x254*x56;
  double x375 = (1.0/2.0)*x374;
  double x376 = x252*x59;
  double x377 = x246*x32 + x247*x62 + x248*x306;
  double x378 = -x376 + x377;
  double x379 = -x375 + x378;
  double x380 = x376 + x377;
  double x381 = x375 + x380;
  double x382 = x266*x52;
  double x383 = -x382;
  double x384 = x267*x56;
  double x385 = (1.0/2.0)*x384;
  double x386 = x265*x59;
  double x387 = x259*x32 + x260*x62 + x261*x306;
  double x388 = -x386 + x387;
  double x389 = -x385 + x388;
  double x390 = x386 + x387;
  double x391 = x385 + x390;
  double x392 = Vxx[130]*x52;
  double x393 = -x392;
  double x394 = Vxx[118]*x56;
  double x395 = (1.0/2.0)*x394;
  double x396 = Vxx[142]*x59;
  double x397 = Vxx[106]*x306 + Vxx[82]*x32 + Vxx[94]*x62;
  double x398 = -x396 + x397;
  double x399 = -x395 + x398;
  double x400 = x52*(x393 + x399);
  double x401 = -x400;
  double x402 = Vxx[129]*x52;
  double x403 = -x402;
  double x404 = Vxx[117]*x56;
  double x405 = (1.0/2.0)*x404;
  double x406 = Vxx[141]*x59;
  double x407 = Vxx[105]*x306 + Vxx[81]*x32 + Vxx[93]*x62;
  double x408 = -x406 + x407;
  double x409 = -x405 + x408;
  double x410 = x56*(x403 + x409);
  double x411 = (1.0/2.0)*x410;
  double x412 = Vxx[131]*x52;
  double x413 = -x412;
  double x414 = Vxx[119]*x56;
  double x415 = (1.0/2.0)*x414;
  double x416 = Vxx[143]*x59;
  double x417 = Vxx[107]*x306 + Vxx[83]*x32 + Vxx[95]*x62;
  double x418 = -x416 + x417;
  double x419 = -x415 + x418;
  double x420 = x59*(x413 + x419);
  double x421 = Vxx[126]*x52;
  double x422 = -x421;
  double x423 = Vxx[114]*x56;
  double x424 = (1.0/2.0)*x423;
  double x425 = Vxx[138]*x59;
  double x426 = Vxx[102]*x306 + Vxx[78]*x32 + Vxx[90]*x62;
  double x427 = -x425 + x426;
  double x428 = -x424 + x427;
  double x429 = Vxx[127]*x52;
  double x430 = -x429;
  double x431 = Vxx[115]*x56;
  double x432 = (1.0/2.0)*x431;
  double x433 = Vxx[139]*x59;
  double x434 = Vxx[103]*x306 + Vxx[79]*x32 + Vxx[91]*x62;
  double x435 = -x433 + x434;
  double x436 = -x432 + x435;
  double x437 = Vxx[128]*x52;
  double x438 = -x437;
  double x439 = Vxx[116]*x56;
  double x440 = (1.0/2.0)*x439;
  double x441 = Vxx[140]*x59;
  double x442 = Vxx[104]*x306 + Vxx[80]*x32 + Vxx[92]*x62;
  double x443 = -x441 + x442;
  double x444 = -x440 + x443;
  double x445 = x306*(x438 + x444) + x32*(x422 + x428) + x62*(x430 + x436);
  double x446 = -x420 + x445;
  double x447 = -x411 + x446;
  double x448 = x420 + x445;
  double x449 = x411 + x448;
  double x450 = x396 + x397;
  double x451 = x52*(-x394 + x450);
  double x452 = -x451;
  double x453 = x406 + x407;
  double x454 = x56*(-x404 + x453);
  double x455 = (1.0/2.0)*x454;
  double x456 = x416 + x417;
  double x457 = x59*(-x414 + x456);
  double x458 = x425 + x426;
  double x459 = x433 + x434;
  double x460 = x441 + x442;
  double x461 = x306*(-x439 + x460) + x32*(-x423 + x458) + x62*(-x431 + x459);
  double x462 = -x457 + x461;
  double x463 = -x455 + x462;
  double x464 = x457 + x461;
  double x465 = x455 + x464;
  double x466 = x52*(x392 + x399);
  double x467 = -x466;
  double x468 = x56*(x402 + x409);
  double x469 = (1.0/2.0)*x468;
  double x470 = x59*(x412 + x419);
  double x471 = x306*(x437 + x444) + x32*(x421 + x428) + x62*(x429 + x436);
  double x472 = -x470 + x471;
  double x473 = -x469 + x472;
  double x474 = x470 + x471;
  double x475 = x469 + x474;
  double x476 = x395 + x450;
  double x477 = x52*(x392 + x476);
  double x478 = -x477;
  double x479 = x405 + x453;
  double x480 = x56*(x402 + x479);
  double x481 = (1.0/2.0)*x480;
  double x482 = x415 + x456;
  double x483 = x59*(x412 + x482);
  double x484 = x424 + x458;
  double x485 = x432 + x459;
  double x486 = x440 + x460;
  double x487 = x306*(x437 + x486) + x32*(x421 + x484) + x62*(x429 + x485);
  double x488 = -x483 + x487;
  double x489 = -x481 + x488;
  double x490 = x483 + x487;
  double x491 = x481 + x490;
  double x492 = x52*(x394 + x398);
  double x493 = -x492;
  double x494 = x56*(x404 + x408);
  double x495 = (1.0/2.0)*x494;
  double x496 = x59*(x414 + x418);
  double x497 = x306*(x439 + x443) + x32*(x423 + x427) + x62*(x431 + x435);
  double x498 = -x496 + x497;
  double x499 = -x495 + x498;
  double x500 = x496 + x497;
  double x501 = x495 + x500;
  double x502 = x52*(x393 + x476);
  double x503 = -x502;
  double x504 = x56*(x403 + x479);
  double x505 = (1.0/2.0)*x504;
  double x506 = x59*(x413 + x482);
  double x507 = x306*(x438 + x486) + x32*(x422 + x484) + x62*(x430 + x485);
  double x508 = -x506 + x507;
  double x509 = -x505 + x508;
  double x510 = x506 + x507;
  double x511 = x505 + x510;
  double x512 = -x0*x64;
  double x513 = Vx[7]*x141 + x25*(-x18 - x30);
  double x514 = Vx[7]*x27;
  double x515 = x0*x11*x3*x4 - x13*x25*x5 - x18*x5*x514;
  double x516 = Vx[7]*x128 + x25*(x17 + x19);
  double x517 = Vx[7]*x138 - x25*x28;
  double x518 = x16 + x22 - x7;
  double x519 = x15*x26 + x2*x29 - x24;
  double x520 = x33 + x36;
  fxVx[0] += Vx[0];
  fxVx[1] += Vx[1];
  fxVx[2] += Vx[2];
  fxVx[3] += Vx[3] + x0*x16 + x0*x22 - x0*x7;
  fxVx[4] += Vx[4] - x0*x24 + x25*x26 + x27*x29;
  fxVx[5] += Vx[5] + x0*x33 + x0*x36;
  fxVx[6] += Vx[0]*dtau + Vx[6];
  fxVx[7] += Vx[1]*dtau + Vx[7];
  fxVx[8] += Vx[2]*dtau + Vx[8];
  fxVx[9] += Vx[3]*dtau + Vx[9] + x40*x[11] + x45*x[10];
  fxVx[10] += Vx[10] + Vx[4]*dtau + x45*x[9] + x49*x[11];
  fxVx[11] += Vx[11]*x50 + Vx[5]*dtau + x40*x[9] + x49*x[10];
  fuVx[0] += x54 + x67;
  fuVx[1] += -x57 + x68;
  fuVx[2] += x53 + x67;
  fuVx[3] += x53 + x69;
  fuVx[4] += x57 + x66;
  fuVx[5] += x54 + x69;
  fxVxxfx[0] += Vxx[0];
  fxVxxfx[1] += Vxx[1];
  fxVxxfx[2] += Vxx[2];
  fxVxxfx[3] += Vxx[3] + x14*x74 - x6*x72 + x75*x76;
  fxVxxfx[4] += Vxx[4] - x23*x72 + x26*x74 + x75*x77;
  fxVxxfx[5] += Vxx[5] + x35*x74 + x75*x79;
  fxVxxfx[6] += Vxx[6] + x80;
  fxVxxfx[7] += Vxx[7] + x81;
  fxVxxfx[8] += Vxx[8] + x82;
  fxVxxfx[9] += Vxx[9] + x83 + x85*x[11] + x88*x[10];
  fxVxxfx[10] += Vxx[10] + x88*x[9] + x89 + x91*x[11];
  fxVxxfx[11] += Vxx[11]*x50 + x85*x[9] + x91*x[10] + x92;
  fxVxxfx[12] += Vxx[12];
  fxVxxfx[13] += Vxx[13];
  fxVxxfx[14] += Vxx[14];
  fxVxxfx[15] += Vxx[15] + x14*x96 - x6*x94 + x76*x97;
  fxVxxfx[16] += Vxx[16] - x23*x94 + x26*x96 + x77*x97;
  fxVxxfx[17] += Vxx[17] + x35*x96 + x79*x97;
  fxVxxfx[18] += Vxx[18] + x98;
  fxVxxfx[19] += Vxx[19] + x99;
  fxVxxfx[20] += Vxx[20] + x100;
  fxVxxfx[21] += Vxx[21] + x101 + x103*x[11] + x105*x[10];
  fxVxxfx[22] += Vxx[22] + x105*x[9] + x106 + x108*x[11];
  fxVxxfx[23] += Vxx[23]*x50 + x103*x[9] + x108*x[10] + x109;
  fxVxxfx[24] += Vxx[24];
  fxVxxfx[25] += Vxx[25];
  fxVxxfx[26] += Vxx[26];
  fxVxxfx[27] += Vxx[27] - x111*x6 + x113*x14 + x114*x76;
  fxVxxfx[28] += Vxx[28] - x111*x23 + x113*x26 + x114*x77;
  fxVxxfx[29] += Vxx[29] + x113*x35 + x114*x79;
  fxVxxfx[30] += Vxx[30] + x115;
  fxVxxfx[31] += Vxx[31] + x116;
  fxVxxfx[32] += Vxx[32] + x117;
  fxVxxfx[33] += Vxx[33] + x118 + x120*x[11] + x122*x[10];
  fxVxxfx[34] += Vxx[34] + x122*x[9] + x123 + x125*x[11];
  fxVxxfx[35] += Vxx[35]*x50 + x120*x[9] + x125*x[10] + x126;
  fxVxxfx[36] += x130;
  fxVxxfx[37] += x131;
  fxVxxfx[38] += x132;
  fxVxxfx[39] += -x127*x135 + x128*x133 + x129*x134 + x136;
  fxVxxfx[40] += x133*x138 + x134*x139 - x135*x137 + x140;
  fxVxxfx[41] += x133*x141 + x134*x142 + x143;
  fxVxxfx[42] += dtau*x130 + x133;
  fxVxxfx[43] += dtau*x131 + x134;
  fxVxxfx[44] += dtau*x132 + x135;
  fxVxxfx[45] += dtau*x136 + x145*x[10] + x147*x[11] + x148;
  fxVxxfx[46] += dtau*x140 + x145*x[9] + x146 + x149*x[11];
  fxVxxfx[47] += dtau*x143 + x144*x50 + x147*x[9] + x149*x[10];
  fxVxxfx[48] += x150;
  fxVxxfx[49] += x151;
  fxVxxfx[50] += x152;
  fxVxxfx[51] += -x127*x155 + x128*x153 + x129*x154 + x156;
  fxVxxfx[52] += -x137*x155 + x138*x153 + x139*x154 + x157;
  fxVxxfx[53] += x141*x153 + x142*x154 + x158;
  fxVxxfx[54] += dtau*x150 + x153;
  fxVxxfx[55] += dtau*x151 + x154;
  fxVxxfx[56] += dtau*x152 + x155;
  fxVxxfx[57] += dtau*x156 + x160*x[10] + x162*x[11] + x163;
  fxVxxfx[58] += dtau*x157 + x160*x[9] + x161 + x164*x[11];
  fxVxxfx[59] += dtau*x158 + x159*x50 + x162*x[9] + x164*x[10];
  fxVxxfx[60] += x165;
  fxVxxfx[61] += x166;
  fxVxxfx[62] += x167;
  fxVxxfx[63] += -x127*x170 + x128*x168 + x129*x169 + x171;
  fxVxxfx[64] += -x137*x170 + x138*x168 + x139*x169 + x172;
  fxVxxfx[65] += x141*x168 + x142*x169 + x173;
  fxVxxfx[66] += dtau*x165 + x168;
  fxVxxfx[67] += dtau*x166 + x169;
  fxVxxfx[68] += dtau*x167 + x170;
  fxVxxfx[69] += dtau*x171 + x175*x[10] + x177*x[11] + x178;
  fxVxxfx[70] += dtau*x172 + x175*x[9] + x176 + x179*x[11];
  fxVxxfx[71] += dtau*x173 + x174*x50 + x177*x[9] + x179*x[10];
  fxVxxfx[72] += x180;
  fxVxxfx[73] += x181;
  fxVxxfx[74] += x182;
  fxVxxfx[75] += -x127*x185 + x128*x183 + x129*x184 + x186;
  fxVxxfx[76] += -x137*x185 + x138*x183 + x139*x184 + x187;
  fxVxxfx[77] += x141*x183 + x142*x184 + x188;
  fxVxxfx[78] += dtau*x180 + x183;
  fxVxxfx[79] += dtau*x181 + x184;
  fxVxxfx[80] += dtau*x182 + x185;
  fxVxxfx[81] += dtau*x186 + x190*x[10] + x192*x[11] + x193;
  fxVxxfx[82] += dtau*x187 + x190*x[9] + x191 + x194*x[11];
  fxVxxfx[83] += dtau*x188 + x189*x50 + x192*x[9] + x194*x[10];
  fxVxxfx[84] += x195;
  fxVxxfx[85] += x196;
  fxVxxfx[86] += x197;
  fxVxxfx[87] += -x127*x200 + x128*x198 + x129*x199 + x201;
  fxVxxfx[88] += -x137*x200 + x138*x198 + x139*x199 + x202;
  fxVxxfx[89] += x141*x198 + x142*x199 + x203;
  fxVxxfx[90] += dtau*x195 + x198;
  fxVxxfx[91] += dtau*x196 + x199;
  fxVxxfx[92] += dtau*x197 + x200;
  fxVxxfx[93] += dtau*x201 + x205*x[10] + x207*x[11] + x208;
  fxVxxfx[94] += dtau*x202 + x205*x[9] + x206 + x209*x[11];
  fxVxxfx[95] += dtau*x203 + x204*x50 + x207*x[9] + x209*x[10];
  fxVxxfx[96] += x210;
  fxVxxfx[97] += x211;
  fxVxxfx[98] += x212;
  fxVxxfx[99] += -x127*x215 + x128*x213 + x129*x214 + x216;
  fxVxxfx[100] += -x137*x215 + x138*x213 + x139*x214 + x217;
  fxVxxfx[101] += x141*x213 + x142*x214 + x218;
  fxVxxfx[102] += dtau*x210 + x213;
  fxVxxfx[103] += dtau*x211 + x214;
  fxVxxfx[104] += dtau*x212 + x215;
  fxVxxfx[105] += dtau*x216 + x220*x[10] + x222*x[11] + x223;
  fxVxxfx[106] += dtau*x217 + x220*x[9] + x221 + x224*x[11];
  fxVxxfx[107] += dtau*x218 + x219*x50 + x222*x[9] + x224*x[10];
  fxVxxfx[108] += x227;
  fxVxxfx[109] += x228;
  fxVxxfx[110] += x229;
  fxVxxfx[111] += -x127*x232 + x128*x230 + x129*x231 + x233;
  fxVxxfx[112] += -x137*x232 + x138*x230 + x139*x231 + x234;
  fxVxxfx[113] += x141*x230 + x142*x231 + x235;
  fxVxxfx[114] += dtau*x227 + x230;
  fxVxxfx[115] += dtau*x228 + x231;
  fxVxxfx[116] += dtau*x229 + x232;
  fxVxxfx[117] += dtau*x233 + x225*x237 + x226*x236 + x238;
  fxVxxfx[118] += dtau*x234 + x236*x240 + x237 + x239*x[11];
  fxVxxfx[119] += dtau*x235 + x236*x50 + x237*x241 + x239*x[10];
  fxVxxfx[120] += x243;
  fxVxxfx[121] += x244;
  fxVxxfx[122] += x245;
  fxVxxfx[123] += -x127*x248 + x128*x246 + x129*x247 + x249;
  fxVxxfx[124] += -x137*x248 + x138*x246 + x139*x247 + x250;
  fxVxxfx[125] += x141*x246 + x142*x247 + x251;
  fxVxxfx[126] += dtau*x243 + x246;
  fxVxxfx[127] += dtau*x244 + x247;
  fxVxxfx[128] += dtau*x245 + x248;
  fxVxxfx[129] += dtau*x249 + x225*x253 + x226*x252 + x254;
  fxVxxfx[130] += dtau*x250 + x240*x252 + x242*x254 + x253;
  fxVxxfx[131] += dtau*x251 + x241*x253 + x252*x50 + x254*x255;
  fxVxxfx[132] += x256;
  fxVxxfx[133] += x257;
  fxVxxfx[134] += x258;
  fxVxxfx[135] += -x127*x261 + x128*x259 + x129*x260 + x262;
  fxVxxfx[136] += -x137*x261 + x138*x259 + x139*x260 + x263;
  fxVxxfx[137] += x141*x259 + x142*x260 + x264;
  fxVxxfx[138] += dtau*x256 + x259;
  fxVxxfx[139] += dtau*x257 + x260;
  fxVxxfx[140] += dtau*x258 + x261;
  fxVxxfx[141] += dtau*x262 + x225*x266 + x226*x265 + x267;
  fxVxxfx[142] += dtau*x263 + x240*x265 + x242*x267 + x266;
  fxVxxfx[143] += dtau*x264 + x241*x266 + x255*x267 + x265*x50;
  fuVxxfx[0] += x269 + x278;
  fuVxxfx[1] += -x270 + x279;
  fuVxxfx[2] += x268 + x278;
  fuVxxfx[3] += x268 + x280;
  fuVxxfx[4] += x270 + x277;
  fuVxxfx[5] += x269 + x280;
  fuVxxfx[6] += x282 + x288;
  fuVxxfx[7] += -x283 + x289;
  fuVxxfx[8] += x281 + x288;
  fuVxxfx[9] += x281 + x290;
  fuVxxfx[10] += x283 + x287;
  fuVxxfx[11] += x282 + x290;
  fuVxxfx[12] += x292 + x298;
  fuVxxfx[13] += -x293 + x299;
  fuVxxfx[14] += x291 + x298;
  fuVxxfx[15] += x291 + x300;
  fuVxxfx[16] += x293 + x297;
  fuVxxfx[17] += x292 + x300;
  fuVxxfx[18] += x302 + x309;
  fuVxxfx[19] += -x303 + x310;
  fuVxxfx[20] += x301 + x309;
  fuVxxfx[21] += x301 + x311;
  fuVxxfx[22] += x303 + x308;
  fuVxxfx[23] += x302 + x311;
  fuVxxfx[24] += x313 + x319;
  fuVxxfx[25] += -x314 + x320;
  fuVxxfx[26] += x312 + x319;
  fuVxxfx[27] += x312 + x321;
  fuVxxfx[28] += x314 + x318;
  fuVxxfx[29] += x313 + x321;
  fuVxxfx[30] += x323 + x329;
  fuVxxfx[31] += -x324 + x330;
  fuVxxfx[32] += x322 + x329;
  fuVxxfx[33] += x322 + x331;
  fuVxxfx[34] += x324 + x328;
  fuVxxfx[35] += x323 + x331;
  fuVxxfx[36] += x333 + x339;
  fuVxxfx[37] += -x334 + x340;
  fuVxxfx[38] += x332 + x339;
  fuVxxfx[39] += x332 + x341;
  fuVxxfx[40] += x334 + x338;
  fuVxxfx[41] += x333 + x341;
  fuVxxfx[42] += x343 + x349;
  fuVxxfx[43] += -x344 + x350;
  fuVxxfx[44] += x342 + x349;
  fuVxxfx[45] += x342 + x351;
  fuVxxfx[46] += x344 + x348;
  fuVxxfx[47] += x343 + x351;
  fuVxxfx[48] += x353 + x359;
  fuVxxfx[49] += -x354 + x360;
  fuVxxfx[50] += x352 + x359;
  fuVxxfx[51] += x352 + x361;
  fuVxxfx[52] += x354 + x358;
  fuVxxfx[53] += x353 + x361;
  fuVxxfx[54] += x363 + x369;
  fuVxxfx[55] += -x364 + x370;
  fuVxxfx[56] += x362 + x369;
  fuVxxfx[57] += x362 + x371;
  fuVxxfx[58] += x364 + x368;
  fuVxxfx[59] += x363 + x371;
  fuVxxfx[60] += x373 + x379;
  fuVxxfx[61] += -x374 + x380;
  fuVxxfx[62] += x372 + x379;
  fuVxxfx[63] += x372 + x381;
  fuVxxfx[64] += x374 + x378;
  fuVxxfx[65] += x373 + x381;
  fuVxxfx[66] += x383 + x389;
  fuVxxfx[67] += -x384 + x390;
  fuVxxfx[68] += x382 + x389;
  fuVxxfx[69] += x382 + x391;
  fuVxxfx[70] += x384 + x388;
  fuVxxfx[71] += x383 + x391;
  fuVxxfu[0] += x401 + x447;
  fuVxxfu[1] += -x410 + x448;
  fuVxxfu[2] += x400 + x447;
  fuVxxfu[3] += x400 + x449;
  fuVxxfu[4] += x410 + x446;
  fuVxxfu[5] += x401 + x449;
  fuVxxfu[6] += x452 + x463;
  fuVxxfu[7] += -x454 + x464;
  fuVxxfu[8] += x451 + x463;
  fuVxxfu[9] += x451 + x465;
  fuVxxfu[10] += x454 + x462;
  fuVxxfu[11] += x452 + x465;
  fuVxxfu[12] += x467 + x473;
  fuVxxfu[13] += -x468 + x474;
  fuVxxfu[14] += x466 + x473;
  fuVxxfu[15] += x466 + x475;
  fuVxxfu[16] += x468 + x472;
  fuVxxfu[17] += x467 + x475;
  fuVxxfu[18] += x478 + x489;
  fuVxxfu[19] += -x480 + x490;
  fuVxxfu[20] += x477 + x489;
  fuVxxfu[21] += x477 + x491;
  fuVxxfu[22] += x480 + x488;
  fuVxxfu[23] += x478 + x491;
  fuVxxfu[24] += x493 + x499;
  fuVxxfu[25] += -x494 + x500;
  fuVxxfu[26] += x492 + x499;
  fuVxxfu[27] += x492 + x501;
  fuVxxfu[28] += x494 + x498;
  fuVxxfu[29] += x493 + x501;
  fuVxxfu[30] += x503 + x509;
  fuVxxfu[31] += -x504 + x510;
  fuVxxfu[32] += x502 + x509;
  fuVxxfu[33] += x502 + x511;
  fuVxxfu[34] += x504 + x508;
  fuVxxfu[35] += x503 + x511;
  Vxfxx[39] += x512 + x513;
  Vxfxx[40] += x515;
  Vxfxx[41] += x516;
  Vxfxx[51] += x515;
  Vxfxx[52] += -x25*x30 - x34*x514 + x512;
  Vxfxx[53] += x517;
  Vxfxx[63] += x516;
  Vxfxx[64] += x517;
  Vxfxx[65] += x513;
  Vxfxx[118] += x45;
  Vxfxx[119] += x40;
  Vxfxx[129] += x45;
  Vxfxx[131] += x49;
  Vxfxx[141] += x40;
  Vxfxx[142] += x49;
  Vxfux[18] += x518;
  Vxfux[19] += x518;
  Vxfux[20] += x518;
  Vxfux[21] += x518;
  Vxfux[22] += x518;
  Vxfux[23] += x518;
  Vxfux[24] += x519;
  Vxfux[25] += x519;
  Vxfux[26] += x519;
  Vxfux[27] += x519;
  Vxfux[28] += x519;
  Vxfux[29] += x519;
  Vxfux[30] += x520;
  Vxfux[31] += x520;
  Vxfux[32] += x520;
  Vxfux[33] += x520;
  Vxfux[34] += x520;
  Vxfux[35] += x520;
 
}

int OCPModel::dimx() const {
  return dimx_;
}

int OCPModel::dimu() const {
  return dimu_;
}

} // namespace cgmres

